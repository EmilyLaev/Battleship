package com.demo.battleship;

import java.util.Scanner;

public class Battleship {

    //main method
    public static void main(String[] args) {
        System.out.println("My Battleship");
        Field myField = new Field(10, "myField");
        int[] cord = {0, 0};
        Ship aC = new Ship("Aircraft Carrier", 5, 0, cord);
        Ship bS = new Ship("Battleship", 4, 0, cord);
        Ship sB = new Ship("Submarine", 3, 0, cord);
        Ship cR = new Ship("Cruiser", 3, 0, cord);
        Ship dS = new Ship("Destroyer", 2, 0, cord);
        createField(myField);
        String cord1 = "00";
        String cord2 = "00";

        placeShip(myField, aC, cord1, cord2);
        placeShip(myField, bS, cord1, cord2);
        placeShip(myField, sB, cord1, cord2);
        placeShip(myField, cR, cord1, cord2);
        placeShip(myField, dS, cord1, cord2);
        System.out.println("The game starts!");
        createFog(myField);
        fireShot(myField);
        createField(myField);

    }


    //method createField
    public static void createField(Field mine) {
        int a = 64;
        System.out.println("  1 2 3 4 5 6 7 8 9 10");
        for (int i = 0; i < 10; i++) {
            a++;
            char b = (char) a;
            System.out.print(b);
            for (int j = 0; j < 10; j++) {
                if (mine.field[i][j] <= 3) { // || mine.field[i][j] == 1 || mine.field[i][j] == 2 || mine.field[i][j] == 3) {
                    System.out.print(" ~");
                } else if (mine.field[i][j] == 4) {
                    System.out.print(" O");
                } else if (mine.field[i][j] == 9) {
                    System.out.print(" X");
                 } else if (mine.field[i][j] > 4 || mine.field[i][j] < 9) {
                    System.out.print(" M");
                }
            }
            System.out.println();
        }
        System.out.println();
    }

    //method createFog
    public static void createFog(Field mine) {
        int a = 64;
        System.out.println("  1 2 3 4 5 6 7 8 9 10");
        for (int i = 0; i < 10; i++) {
            a++;
            char b = (char) a;
            System.out.print(b);
            for (int j = 0; j < 10; j++) {
                if (mine.field[i][j] == 9) {
                    System.out.print(" X");
                } else if (mine.field[i][j] > 4 && mine.field[i][j] < 9) {
                    System.out.print(" M");
                } else {
                    System.out.print(" ~");
                }
            }
            System.out.println();
        }
        System.out.println();
    }

    //method AskShip
    public static void askShip(Ship ship, String cord1, String cord2) {
        String str = String.format("Enter the coordinates of the %s (%d cells)", ship.getName(), ship.getSize());
        System.out.println(str);
        boolean posCor = false;
        Scanner scan = new Scanner(System.in);
        while (!posCor) {
            boolean correctCor1 = false;
            boolean correctCor2 = false;
            while (!correctCor1 || !correctCor2) {
                cord1 = scan.next();
                cord2 = scan.next();
                correctCor1 = checkString(cord1);
                correctCor2 = checkString(cord2);
                if (!correctCor1 || !correctCor2) {
                    System.out.println("Error! Invalid Coordinates, please try again");
                }
            }
            int[] cor1 = setCord(cord1);
            int[] cor2 = setCord(cord2);
            int dir = checkDir(cor1, cor2);
            ship.setCord(cor1);
            ship.setDir(dir);
            posCor = checkCord(ship, cor2);
            //System.out.println(dir);
            if (!posCor) {
                System.out.println("Error! Wrong ship size! Try Again");
            }
        }
        //System.out.println("Works For Now" + ship.dir);
    }

    //method askShot
    public static int[] askShot(Field field, String cord) {
        System.out.println("Take a shot!");
        Scanner scan = new Scanner(System.in);
        boolean CorCord = false;
        while (!CorCord) {
            cord = scan.next();
            CorCord = checkString(cord);
            if (!CorCord) {
                System.out.println("Error! Invalid Coordinate, try again");
            }
        }
        return setCord(cord);
    }

    //method checkString
    public static boolean checkString(String scan) {

        if (scan.length() == 2) {
            int a = scan.charAt(0) - 65;
            int b = scan.charAt(1) - 49;
            if (a >= 0 && a < 11 && b >= 0 && b < 10) {
                return true;
            } else {
                return false;
            }
        } else if (scan.length() == 3) {
            int a = scan.charAt(0) - 65;
            if (a >= 0 && a < 11 && scan.charAt(1) == '1' && scan.charAt(2) == '0') {
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    //method setCord
    public static int[] setCord(String scan) {
        int let;
        int num;
        if (scan.length() == 2) {
            let = scan.charAt(0) - 65;
            num = scan.charAt(1) - 49;
        } else {
            let = scan.charAt(0) - 65;
            num = 9;
        }
        //System.out.println(let + " " + num);
        return new int[]{let, num};
    }

    //method checkCord
    public static boolean checkCord(Ship ship, int[] cord2) {
        if (ship.dir != 0) {
            if (ship.dir == 1) {
                return ship.size == cord2[1] - ship.stCord[1] + 1;
            } else if (ship.dir == 2) {
                return ship.size == ship.stCord[1] - cord2[1] + 1;
            } else if (ship.dir == 3) {
                return ship.size == cord2[0] - ship.stCord[0] + 1;
            } else if (ship.dir == 4) {
                return ship.size == ship.stCord[0] - cord2[0] + 1;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    //method checkDir
    public static int checkDir(int[] corD1, int[] corD2) {
        if (corD1[0] == corD2[0]) {
            if (corD1[1] < corD2[1]) {
                return 1;
            } else {
                return 2;
            }
        } else if (corD1[1] == corD2[1]) {
            if (corD1[0] < corD2[0]) {
                return 3;
            } else {
                return 4;
            }
        } else {
            return 0;
        }
    }

    //method markSpot
    public static void markSpot(Field field, int[] cord, int value) {
        field.field[cord[0]][cord[1]] = field.field[cord[0]][cord[1]] + value;
    }

    //method getSpot
    public static int getSpot(Field field, int[] cord) {
        return field.field[cord[0]][cord[1]];
    }

    //Method checkField
    public static boolean checkField(Field field, int max) {
        int works = 0;
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                if (field.field[i][j] > max) {
                    works++;
                }
            }
        }
        return works == 0;
    }

    //Method addShip
    public static Field addShip(Field field, Ship ship, int value) {
        int[] corD = new int[2];
        for (int i = 0; i < 2; i++) {
            corD[i] = ship.stCord[i];
        }
        if (ship.dir == 1) {
            for (int i = 0; i < ship.size; i++) {
                markSpot(field, corD, value);
                corD[1]++;
            }
        } else if (ship.dir == 2) {
            for (int i = 0; i < ship.size; i++) {
                markSpot(field, corD, value);
                corD[1]--;
            }
        } else if (ship.dir == 3) {
            for (int i = 0; i < ship.size; i++) {
                markSpot(field, corD, value);
                corD[0]++;
            }
        } else if (ship.dir == 4) {
            for (int i = 0; i < ship.size; i++) {
                markSpot(field, corD, value);
                corD[0]--;
            }
        }
        return field;
    }

    //method addRShip
    public static Field addRShip(Field field, Ship ship, int value) {
        int[] cord = new int[2];
        for (int i = 0; i < 2; i++) {
            cord[i] = ship.stCord[i];
        }
        if (ship.dir == 1) {
            cord[0]--;
            cord[0]--;
            cord[1]--;
            for (int i = 0; i < ship.size + 2; i++) {
                for (int j = 0; j < 3; j++) {
                    try {
                        cord[0]++;
                        markSpot(field, cord, value);
                    } catch (Exception e) {
                        continue;
                    }
                }
                cord[0]--;
                cord[0]--;
                cord[0]--;
                cord[1]++;
            }
        } else if (ship.dir == 2) {
            cord[0]--;
            cord[0]--;
            cord[1]++;
            for (int i = 0; i < ship.size + 2; i++) {
                for (int j = 0; j < 3; j++) {
                    try {
                        cord[0]++;
                        markSpot(field, cord, value);
                    } catch (Exception e) {
                        continue;
                    }
                }
                cord[0]--;
                cord[0]--;
                cord[0]--;
                cord[1]--;
            }
        } else if (ship.dir == 3) {
            cord[0]--;
            cord[1]--;
            cord[1]--;
            for (int i = 0; i < ship.size + 2; i++) {
                for (int j = 0; j < 3; j++) {
                    try {
                        cord[1]++;
                        markSpot(field, cord, value);
                    } catch (Exception e) {
                        continue;
                    }
                }
                cord[0]++;
                cord[1]--;
                cord[1]--;
                cord[1]--;
            }
        } else if (ship.dir == 4) {
            cord[0]++;
            cord[1]--;
            cord[1]--;
            for (int i = 0; i < ship.size + 2; i++) {
                for (int j = 0; j < 3; j++) {
                    try {
                        cord[1]++;
                        markSpot(field, cord, value);
                    } catch (Exception e) {
                        continue;
                    }
                }
                cord[0]--;
                cord[1]--;
                cord[1]--;
                cord[1]--;
            }
        }
        return field;
    }

    //method copyArray
    public static int[][] copyArray(int[][] a) {
        int[][] b = new int[10][10];
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                b[i][j] = a[i][j];
            }
        }
        return b;
    }


    //method placeShip
    public static void placeShip(Field field1, Ship ship, String cord1, String cord2) {
        boolean canSet = false;
        while (!canSet) {
            askShip(ship, cord1, cord2);
            Field temp = new Field(10, "TEMP");
            temp.setField(copyArray(field1.getField()));
            addShip(temp, ship, 3);
            addRShip(temp, ship, 1);
            canSet = checkField(temp, 4);
            if (!canSet) {
                System.out.println("Error! Cannot set boat here!");
            }
        }
        addShip(field1, ship, 3);
        addRShip(field1, ship, 1);
        createField(field1);
    }

    //method checkShot
    public static boolean checkSpot(Field field, int[] cor, int value) {
        return getSpot(field, cor) == value;
    }

    //method hitMiss
    public static void hitMiss(Field field, int[] cor) {
        int val = getSpot(field, cor);
        if (val == 9) {
            System.out.println("You hit a ship!");
        } else if (val < 9) {
            System.out.println("You missed!");
        }
    }

    //method fireShot
    public static void fireShot(Field field) {
        String cord = "00";
        int[] cor = {0, 0};
        boolean okShot = false;
        while (!okShot) {
            cor = askShot(field, cord);
            Field temp = new Field(10, "Temp");
            temp.setField(copyArray(field.getField()));
            markSpot(temp, cor, 5);
            okShot = checkField(temp, 9);
            if (!okShot) {
                System.out.println("Error! Already hit this spot!");
            }
        }
        markSpot(field, cor, 5);
        createFog(field);
        hitMiss(field, cor);
    }


    //class Ship
    public static class Ship {
        private final String name;
        private int size;
        private int dir;
        private int[] stCord;

        public Ship(String name, int size, int dir, int[] stCord) {
            this.name = name;
            this.size = size;
            this.dir = dir;
            this.stCord = stCord;
        }

        public int getSize() {
            return size;
        }

        public void setSize(int size) {
            this.size = size;
        }

        public int getDir() {
            return dir;
        }

        public void setDir(int dir) {
            this.dir = dir;
        }

        public int[] getStCord() {
            return stCord;
        }

        public void setCord(int[] stCord) {
            this.stCord = stCord;
        }

        public String getName() {
            return name;
        }

    }

    //class Field
    public static class Field {
        private int[][] field;
        private int size;
        private String name;

        public Field(int size, String name) {
            this.size = size;
            this.name = name;
            int[][] bulk = new int[size][size];
            for (int i = 0; i < size; i++) {
                for (int j = 0; j < size; j++) {
                    bulk[i][j] = 0;
                }
            }
            this.field = bulk;
        }

        public void setField(int[][] field) {
            this.field = field;
        }

        public int[][] getField() {
            return field;
        }
    }
}